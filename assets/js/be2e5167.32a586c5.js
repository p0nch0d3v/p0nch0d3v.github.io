"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7325],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),f=d(n),c=o,u=f["".concat(s,".").concat(c)]||f[c]||m[c]||i;return n?r.createElement(u,l(l({ref:t},p),{},{components:n})):r.createElement(u,l({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var d=2;d<i;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={title:"2022-09-10 (medium)",slug:"2022-09-10-medium",tags:["coding-problem","medium"],authors:["p0nch0d3v"],pagination_prev:"coding-problems/index",pagination_next:null},l=void 0,a={unversionedId:"coding-problems/medium/2022-09-10-medium",id:"coding-problems/medium/2022-09-10-medium",title:"2022-09-10 (medium)",description:"Problem:",source:"@site/docs/coding-problems/medium/2022-09-10-medium.md",sourceDirName:"coding-problems/medium",slug:"/coding-problems/medium/2022-09-10-medium",permalink:"/docs/coding-problems/medium/2022-09-10-medium",draft:!1,tags:[{label:"coding-problem",permalink:"/docs/tags/coding-problem"},{label:"medium",permalink:"/docs/tags/medium"}],version:"current",frontMatter:{title:"2022-09-10 (medium)",slug:"2022-09-10-medium",tags:["coding-problem","medium"],authors:["p0nch0d3v"],pagination_prev:"coding-problems/index",pagination_next:null},sidebar:"tutorialSidebar",previous:{title:"Coding Problems",permalink:"/docs/coding-problems/"}},s={},d=[{value:"Problem:",id:"problem",level:3},{value:"Proposed solution # 1:",id:"proposed-solution--1",level:3}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"problem"},"Problem:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Given the root to a binary tree, implement ",(0,o.kt)("inlineCode",{parentName:"em"},"serialize(root)"),", which serializes the tree into a string, and ",(0,o.kt)("inlineCode",{parentName:"em"},"deserialize(s)"),", which deserializes the string back into the tree.")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"For example, given the following ",(0,o.kt)("inlineCode",{parentName:"em"},"Node")," class")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"The following test should pass:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"node = Node('root', Node('left', Node('left.left')), Node('right'))\nassert deserialize(serialize(node)).left.left.val == 'left.left'\n")),(0,o.kt)("h3",{id:"proposed-solution--1"},"Proposed solution # 1:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"(Python)"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef serialize(node):\n    serialized = \"{\"\n    if (node != None):\n        if (node.val != None):\n            serialized = serialized + ('v: \"' + node.val + '\"')\n        if (node.left != None):\n            serialized = serialized + (', l: ' + serialize(node.left))\n        if (node.right != None):\n            serialized = serialized + (', r: ' + serialize(node.right))\n        serialized = serialized + \"}\"\n    return serialized\n\ndef deserialize(node_str):\n    val_token = \"{v:\"\n    left_token = \"l:\"\n    right_token = \"r:\"\n    close_token = \"}\"\n    \n    val_token_pos = node_str.find(val_token)\n    left_token_pos = node_str.find(left_token)\n    right_token_pos = node_str.find(right_token)\n\n    val_start_pos = val_token_pos + len(val_token) + 2\n\n    val = node_str[val_start_pos:node_str.find('\"', val_start_pos)]\n    left = None\n    right = None\n\n    if (left_token_pos >= 0):\n        left_start_pos = left_token_pos + len(left_token) + 1\n        left_str = node_str[left_start_pos:node_str.find('}', left_start_pos) + 1]\n        left = deserialize(left_str)\n    if (right_token_pos >= 0):\n        right_start_pos = right_token_pos + len(right_token) + 1\n        right_str = node_str[right_start_pos:node_str.find('}', right_start_pos) + 1]\n        right = deserialize(right_str)\n\n    return Node(val, left, right)\n\nnode = Node('root', Node('left', Node('left.left')), Node('right'))\nprint(serialize(node))\nassert deserialize(serialize(node)).left.left.val == 'left.left'\n")))))}m.isMDXComponent=!0}}]);