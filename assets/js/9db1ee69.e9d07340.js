"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1501],{3905:(e,a,n)=>{n.d(a,{Zo:()=>i,kt:()=>h});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),m=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},i=function(e){var a=m(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),u=m(n),h=o,k=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?t.createElement(k,c(c({ref:a},i),{},{components:n})):t.createElement(k,c({ref:a},i))}));function h(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var m=2;m<r;m++)c[m]=n[m];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2235:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var t=n(7462),o=(n(7294),n(3905));const r={title:"Make chocolate",slug:"codingbat-make_chocolate",tags:["coding-problem","hard"],authors:["p0nch0d3v"],pagination_prev:"coding-problems/index",pagination_next:null},c=void 0,l={unversionedId:"coding-problems/codingbat.com/make_chocolate",id:"coding-problems/codingbat.com/make_chocolate",title:"Make chocolate",description:"We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.",source:"@site/docs/coding-problems/codingbat.com/make_chocolate.md",sourceDirName:"coding-problems/codingbat.com",slug:"/coding-problems/codingbat.com/codingbat-make_chocolate",permalink:"/docs/coding-problems/codingbat.com/codingbat-make_chocolate",draft:!1,tags:[{label:"coding-problem",permalink:"/docs/tags/coding-problem"},{label:"hard",permalink:"/docs/tags/hard"}],version:"current",frontMatter:{title:"Make chocolate",slug:"codingbat-make_chocolate",tags:["coding-problem","hard"],authors:["p0nch0d3v"],pagination_prev:"coding-problems/index",pagination_next:null},sidebar:"tutorialSidebar",previous:{title:"Coding Problems",permalink:"/docs/coding-problems/"}},s={},m=[],i={toc:m};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},i,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"We want make a package of goal kilos of chocolate. We have small bars (1 kilo each) and big bars (5 kilos each). Return the number of small bars to use, assuming we always use big bars before small bars. Return -1 if it can't be done.")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codingbat.com/prob/p190859"},"Reference")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Proposed solution # 1 - (Python)"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def make_chocolate(small, big, goal):\n    remain = goal - (big * 5)\n    if (remain == 0):\n        return 0\n    while (remain < 0):\n        remain = remain + 5\n    remain = remain - small\n    if (remain <= 0):\n        return small + remain\n    return -1\n\ndef main():\n    assert make_chocolate(4, 1, 9) == 4\n    assert make_chocolate(4, 1, 10) == -1\n    assert make_chocolate(4, 1, 7) == 2\n    assert make_chocolate(6, 2, 7) == 2\n    assert make_chocolate(4, 1, 5) == 0\n    assert make_chocolate(4, 1, 4) == 4\n    assert make_chocolate(5, 4, 9) == 4\n    assert make_chocolate(9, 3, 18) == 3\n    assert make_chocolate(3, 1, 9) == -1\n    assert make_chocolate(1, 2, 7) == -1\n    assert make_chocolate(1, 2, 6) == 1\n    assert make_chocolate(1, 2, 5) == 0\n    assert make_chocolate(6, 1, 10) == 5\n    assert make_chocolate(6, 1, 11) == 6\n    assert make_chocolate(6, 1, 12) == -1\n    assert make_chocolate(6, 1, 13) == -1\n    assert make_chocolate(6, 2, 10) == 0\n    assert make_chocolate(6, 2, 11) == 1\n    assert make_chocolate(6, 2, 12) == 2\n    assert make_chocolate(60, 100, 550) == 50\n    assert make_chocolate(1000, 1000000, 5000006) == 6\n    assert make_chocolate(7, 1, 12) == 7\n    assert make_chocolate(7, 1, 13) == -1\n    assert make_chocolate(7, 2, 13) == 3\n\nif __name__ == "__main__":\n    main()\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Proposed solution # 2 - (Python)"),(0,o.kt)("p",null,(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def make_chocolate(small, big, goal):\n    remain = goal\n    remain_big = big\n    remain_small = small\n    used_big = 0\n    used_small = 0\n    \n    while (big > 0 and remain_big > 0 and remain >= 5):\n        remain_big = remain_big - 1\n        remain = remain - 5\n        used_big = used_big + 1\n    \n    while (small > 0 and remain_small > 0 and remain > 0):\n        remain_small = remain_small - 1\n        remain = remain - 1\n        used_small = used_small + 1\n    \n    return (used_small if remain == 0 else -1)\n\ndef main():\n    assert make_chocolate(4, 1, 9) == 4\n    assert make_chocolate(4, 1, 10) == -1\n    assert make_chocolate(4, 1, 7) == 2\n    assert make_chocolate(6, 2, 7) == 2\n    assert make_chocolate(4, 1, 5) == 0\n    assert make_chocolate(4, 1, 4) == 4\n    assert make_chocolate(5, 4, 9) == 4\n    assert make_chocolate(9, 3, 18) == 3\n    assert make_chocolate(3, 1, 9) == -1\n    assert make_chocolate(1, 2, 7) == -1\n    assert make_chocolate(1, 2, 6) == 1\n    assert make_chocolate(1, 2, 5) == 0\n    assert make_chocolate(6, 1, 10) == 5\n    assert make_chocolate(6, 1, 11) == 6\n    assert make_chocolate(6, 1, 12) == -1\n    assert make_chocolate(6, 1, 13) == -1\n    assert make_chocolate(6, 2, 10) == 0\n    assert make_chocolate(6, 2, 11) == 1\n    assert make_chocolate(6, 2, 12) == 2\n    assert make_chocolate(60, 100, 550) == 50\n    assert make_chocolate(1000, 1000000, 5000006) == 6\n    assert make_chocolate(7, 1, 12) == 7\n    assert make_chocolate(7, 1, 13) == -1\n    assert make_chocolate(7, 2, 13) == 3\n\nif __name__ == "__main__":\n    main()\n\n')))))}p.isMDXComponent=!0}}]);