"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[714],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=d(n),u=o,h=s["".concat(p,".").concat(u)]||s[u]||m[u]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},6162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const a={title:"Coding Problem 2022-09-13 (hard)",slug:"coding-problem-2022-09-13",tags:["coding-problem","hard"],authors:["p0nch0d3v"]},i=void 0,l={permalink:"/coding-problem-2022-09-13",source:"@site/blog/2022-09-13-daily-coding-problem.md",title:"Coding Problem 2022-09-13 (hard)",description:"Problem:",date:"2022-09-13T00:00:00.000Z",formattedDate:"September 13, 2022",tags:[{label:"coding-problem",permalink:"/tags/coding-problem"},{label:"hard",permalink:"/tags/hard"}],hasTruncateMarker:!1,authors:[{name:"p0nch0 d3v",title:"Software Developer",url:"https://github.com/p0nch0d3v",imageURL:"https://github.com/p0nch0d3v.png",key:"p0nch0d3v"}],frontMatter:{title:"Coding Problem 2022-09-13 (hard)",slug:"coding-problem-2022-09-13",tags:["coding-problem","hard"],authors:["p0nch0d3v"]},prevItem:{title:"Coding Problem 2022-09-14 (medium)",permalink:"/coding-problem-2022-09-14"},nextItem:{title:"Coding Problem 2022-09-12 (medium)",permalink:"/coding-problem-2022-09-12"}},p={authorsImageUrls:[void 0]},d=[{value:"Problem:",id:"problem",level:3},{value:"Proposed solution:",id:"proposed-solution",level:3}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"problem"},"Problem:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"An XOR linked list is a more memory efficient doubly linked list. Instead of each node holding ",(0,o.kt)("inlineCode",{parentName:"em"},"next")," and ",(0,o.kt)("inlineCode",{parentName:"em"},"prev")," fields, it holds a field named ",(0,o.kt)("inlineCode",{parentName:"em"},"both"),", which is an XOR of the next node and the previous node. Implement an XOR linked list; it has an ",(0,o.kt)("inlineCode",{parentName:"em"},"add(element)")," which adds the element to the end, and a ",(0,o.kt)("inlineCode",{parentName:"em"},"get(index)")," which returns the node at index.")),(0,o.kt)("p",null,"If using a language that has no pointers (such as ",(0,o.kt)("inlineCode",{parentName:"p"},"Python"),"), you can assume you have access to ",(0,o.kt)("inlineCode",{parentName:"p"},"get_pointer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dereference_pointer")," functions that converts between nodes and memory addresses."),(0,o.kt)("h3",{id:"proposed-solution"},"Proposed solution:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TBD")))}m.isMDXComponent=!0}}]);